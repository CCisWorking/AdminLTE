import { e as createComponent, r as renderTemplate, i as renderComponent, j as renderHead } from '../../../chunks/astro/server_BcTFPzss.mjs';
import 'kleur/colors';
import { $ as $$Scripts, a as $$Head } from '../../../chunks/_scripts_CdAMe_9E.mjs';
import { $ as $$Footer, a as $$Topbar } from '../../../chunks/_topbar_b9tgrSJ9.mjs';
import { $ as $$Sidenav } from '../../../chunks/_sidenav_GULq_0sp.mjs';
import { C as Content } from '../../../chunks/color-mode_DZQF8k3h.mjs';
export { renderers } from '../../../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw) }));
var _a;
const $$ColorMode = createComponent(($$result, $$props, $$slots) => {
  const title = "Color Mode | AdminLTE 4";
  const path = "../../../dist";
  const mainPage = "docs";
  const page = "color-mode";
  return renderTemplate(_a || (_a = __template(['<html lang="en"> <!--begin::Head--> <head>', "", '</head> <!--end::Head--> <!--begin::Body--> <body class="layout-fixed sidebar-expand-lg bg-body-tertiary"> <!--begin::App Wrapper--> <div class="app-wrapper"> ', " ", ' <!--begin::App Main--> <main class="app-main"> <!--begin::App Content Header--> <div class="app-content-header"> <!--begin::Container--> <div class="container-fluid"> <!--begin::Row--> <div class="row"> <div class="col-sm-6"> <h3 class="mb-0">Color Mode Toggle</h3> </div> <div class="col-sm-6"> <ol class="breadcrumb float-sm-end"> <li class="breadcrumb-item"><a href="#">Docs</a></li> <li class="breadcrumb-item active" aria-current="page">\nColor Mode\n</li> </ol> </div> </div> <!--end::Row--> </div> <!--end::Container--> </div> <!--end::App Content Header--> <!--begin::App Content--> <div class="app-content"> <!--begin::Container--> <div class="container-fluid"> <!--begin::Row--> <div class="row g-4"> <div class="col-12"> <div class="callout callout-info"> <h5 class="fw-bold">Tips</h5> <p> <a href="https://getbootstrap.com/docs/5.3/customize/color-modes/" target="_blank" rel="noopener noreferrer" class="callout-link">\nColor modes in Bootstrap\n</a> allow you to switch between light and dark modes. You can do this using the data-bs-theme attribute. You can also create your own custom color modes.\n</p> </div> </div> <!-- Start column --> <div class="col-12"> <!--begin::Header--> <nav class="navbar navbar-expand bg-body"> <!--begin::Container--> <div class="container-fluid"> <!--begin::Start Navbar links--> <ul class="navbar-nav"> <li class="nav-item"> <a class="nav-link" data-lte-toggle="sidebar" href="#" role="button"><i class="bi bi-list"></i></a> </li> <li class="nav-item d-none d-md-block"> <a href="#" class="nav-link">Home</a> </li> <li class="nav-item d-none d-md-block"> <a href="#" class="nav-link">Contact</a> </li> </ul> <!--end::Start Navbar links--> <!--begin::End Navbar links--> <ul class="navbar-nav ms-auto"> <li class="nav-item dropdown"> <button class="btn btn-link nav-link py-2 px-0 px-lg-2 dropdown-toggle d-flex align-items-center" id="bd-theme" type="button" aria-expanded="false" data-bs-toggle="dropdown" data-bs-display="static"> <span class="theme-icon-active"> <i class="my-1"></i> </span> <span class="d-lg-none ms-2" id="bd-theme-text">Toggle theme</span> </button> <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="bd-theme-text" style="--bs-dropdown-min-width: 8rem;"> <li> <button type="button" class="dropdown-item d-flex align-items-center active" data-bs-theme-value="light" aria-pressed="false"> <i class="bi bi-sun-fill me-2"></i>\nLight\n<i class="bi bi-check-lg ms-auto d-none"></i> </button> </li> <li> <button type="button" class="dropdown-item d-flex align-items-center" data-bs-theme-value="dark" aria-pressed="false"> <i class="bi bi-moon-fill me-2"></i>\nDark\n<i class="bi bi-check-lg ms-auto d-none"></i> </button> </li> <li> <button type="button" class="dropdown-item d-flex align-items-center" data-bs-theme-value="auto" aria-pressed="true"> <i class="bi bi-circle-fill-half-stroke me-2"></i>\nAuto\n<i class="bi bi-check-lg ms-auto d-none"></i> </button> </li> </ul> </li> </ul> <!--end::End Navbar links--> </div> <!--end::Container--> </nav> <!--end::Header--> </div> <!-- Start column --> <div class="col-12"> ', " </div> </div> <!--end::Row--> </div> <!--end::Container--> </div> <!--end::App Content--> </main> <!--end::App Main--> ", " </div> <!--end::App Wrapper--> ", ' <script>\n      // Color Mode Toggler\n      (() => {\n        "use strict";\n\n        const storedTheme = localStorage.getItem("theme");\n\n        const getPreferredTheme = () => {\n          if (storedTheme) {\n            return storedTheme;\n          }\n\n          return window.matchMedia("(prefers-color-scheme: dark)").matches\n            ? "dark"\n            : "light";\n        };\n\n        const setTheme = function (theme) {\n          if (\n            theme === "auto" &&\n            window.matchMedia("(prefers-color-scheme: dark)").matches\n          ) {\n            document.documentElement.setAttribute("data-bs-theme", "dark");\n          } else {\n            document.documentElement.setAttribute("data-bs-theme", theme);\n          }\n        };\n\n        setTheme(getPreferredTheme());\n\n        const showActiveTheme = (theme, focus = false) => {\n          const themeSwitcher = document.querySelector("#bd-theme");\n\n          if (!themeSwitcher) {\n            return;\n          }\n\n          const themeSwitcherText = document.querySelector("#bd-theme-text");\n          const activeThemeIcon = document.querySelector(\n            ".theme-icon-active i"\n          );\n          const btnToActive = document.querySelector(\n            `[data-bs-theme-value="${theme}"]`\n          );\n          const svgOfActiveBtn = btnToActive\n            .querySelector("i")\n            .getAttribute("class");\n\n          for (const element of document.querySelectorAll(\n            "[data-bs-theme-value]"\n          )) {\n            element.classList.remove("active");\n            element.setAttribute("aria-pressed", "false");\n          }\n\n          btnToActive.classList.add("active");\n          btnToActive.setAttribute("aria-pressed", "true");\n          activeThemeIcon.setAttribute("class", svgOfActiveBtn);\n          const themeSwitcherLabel = `${themeSwitcherText.textContent} (${btnToActive.dataset.bsThemeValue})`;\n          themeSwitcher.setAttribute("aria-label", themeSwitcherLabel);\n\n          if (focus) {\n            themeSwitcher.focus();\n          }\n        };\n\n        window\n          .matchMedia("(prefers-color-scheme: dark)")\n          .addEventListener("change", () => {\n            if (storedTheme !== "light" || storedTheme !== "dark") {\n              setTheme(getPreferredTheme());\n            }\n          });\n\n        window.addEventListener("DOMContentLoaded", () => {\n          showActiveTheme(getPreferredTheme());\n\n          for (const toggle of document.querySelectorAll(\n            "[data-bs-theme-value]"\n          )) {\n            toggle.addEventListener("click", () => {\n              const theme = toggle.getAttribute("data-bs-theme-value");\n              localStorage.setItem("theme", theme);\n              setTheme(theme);\n              showActiveTheme(theme, true);\n            });\n          }\n        });\n      })();\n    <\/script> <!--end::Script--> </body><!--end::Body--></html>'], ['<html lang="en"> <!--begin::Head--> <head>', "", '</head> <!--end::Head--> <!--begin::Body--> <body class="layout-fixed sidebar-expand-lg bg-body-tertiary"> <!--begin::App Wrapper--> <div class="app-wrapper"> ', " ", ' <!--begin::App Main--> <main class="app-main"> <!--begin::App Content Header--> <div class="app-content-header"> <!--begin::Container--> <div class="container-fluid"> <!--begin::Row--> <div class="row"> <div class="col-sm-6"> <h3 class="mb-0">Color Mode Toggle</h3> </div> <div class="col-sm-6"> <ol class="breadcrumb float-sm-end"> <li class="breadcrumb-item"><a href="#">Docs</a></li> <li class="breadcrumb-item active" aria-current="page">\nColor Mode\n</li> </ol> </div> </div> <!--end::Row--> </div> <!--end::Container--> </div> <!--end::App Content Header--> <!--begin::App Content--> <div class="app-content"> <!--begin::Container--> <div class="container-fluid"> <!--begin::Row--> <div class="row g-4"> <div class="col-12"> <div class="callout callout-info"> <h5 class="fw-bold">Tips</h5> <p> <a href="https://getbootstrap.com/docs/5.3/customize/color-modes/" target="_blank" rel="noopener noreferrer" class="callout-link">\nColor modes in Bootstrap\n</a> allow you to switch between light and dark modes. You can do this using the data-bs-theme attribute. You can also create your own custom color modes.\n</p> </div> </div> <!-- Start column --> <div class="col-12"> <!--begin::Header--> <nav class="navbar navbar-expand bg-body"> <!--begin::Container--> <div class="container-fluid"> <!--begin::Start Navbar links--> <ul class="navbar-nav"> <li class="nav-item"> <a class="nav-link" data-lte-toggle="sidebar" href="#" role="button"><i class="bi bi-list"></i></a> </li> <li class="nav-item d-none d-md-block"> <a href="#" class="nav-link">Home</a> </li> <li class="nav-item d-none d-md-block"> <a href="#" class="nav-link">Contact</a> </li> </ul> <!--end::Start Navbar links--> <!--begin::End Navbar links--> <ul class="navbar-nav ms-auto"> <li class="nav-item dropdown"> <button class="btn btn-link nav-link py-2 px-0 px-lg-2 dropdown-toggle d-flex align-items-center" id="bd-theme" type="button" aria-expanded="false" data-bs-toggle="dropdown" data-bs-display="static"> <span class="theme-icon-active"> <i class="my-1"></i> </span> <span class="d-lg-none ms-2" id="bd-theme-text">Toggle theme</span> </button> <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="bd-theme-text" style="--bs-dropdown-min-width: 8rem;"> <li> <button type="button" class="dropdown-item d-flex align-items-center active" data-bs-theme-value="light" aria-pressed="false"> <i class="bi bi-sun-fill me-2"></i>\nLight\n<i class="bi bi-check-lg ms-auto d-none"></i> </button> </li> <li> <button type="button" class="dropdown-item d-flex align-items-center" data-bs-theme-value="dark" aria-pressed="false"> <i class="bi bi-moon-fill me-2"></i>\nDark\n<i class="bi bi-check-lg ms-auto d-none"></i> </button> </li> <li> <button type="button" class="dropdown-item d-flex align-items-center" data-bs-theme-value="auto" aria-pressed="true"> <i class="bi bi-circle-fill-half-stroke me-2"></i>\nAuto\n<i class="bi bi-check-lg ms-auto d-none"></i> </button> </li> </ul> </li> </ul> <!--end::End Navbar links--> </div> <!--end::Container--> </nav> <!--end::Header--> </div> <!-- Start column --> <div class="col-12"> ', " </div> </div> <!--end::Row--> </div> <!--end::Container--> </div> <!--end::App Content--> </main> <!--end::App Main--> ", " </div> <!--end::App Wrapper--> ", ' <script>\n      // Color Mode Toggler\n      (() => {\n        "use strict";\n\n        const storedTheme = localStorage.getItem("theme");\n\n        const getPreferredTheme = () => {\n          if (storedTheme) {\n            return storedTheme;\n          }\n\n          return window.matchMedia("(prefers-color-scheme: dark)").matches\n            ? "dark"\n            : "light";\n        };\n\n        const setTheme = function (theme) {\n          if (\n            theme === "auto" &&\n            window.matchMedia("(prefers-color-scheme: dark)").matches\n          ) {\n            document.documentElement.setAttribute("data-bs-theme", "dark");\n          } else {\n            document.documentElement.setAttribute("data-bs-theme", theme);\n          }\n        };\n\n        setTheme(getPreferredTheme());\n\n        const showActiveTheme = (theme, focus = false) => {\n          const themeSwitcher = document.querySelector("#bd-theme");\n\n          if (!themeSwitcher) {\n            return;\n          }\n\n          const themeSwitcherText = document.querySelector("#bd-theme-text");\n          const activeThemeIcon = document.querySelector(\n            ".theme-icon-active i"\n          );\n          const btnToActive = document.querySelector(\n            \\`[data-bs-theme-value="\\${theme}"]\\`\n          );\n          const svgOfActiveBtn = btnToActive\n            .querySelector("i")\n            .getAttribute("class");\n\n          for (const element of document.querySelectorAll(\n            "[data-bs-theme-value]"\n          )) {\n            element.classList.remove("active");\n            element.setAttribute("aria-pressed", "false");\n          }\n\n          btnToActive.classList.add("active");\n          btnToActive.setAttribute("aria-pressed", "true");\n          activeThemeIcon.setAttribute("class", svgOfActiveBtn);\n          const themeSwitcherLabel = \\`\\${themeSwitcherText.textContent} (\\${btnToActive.dataset.bsThemeValue})\\`;\n          themeSwitcher.setAttribute("aria-label", themeSwitcherLabel);\n\n          if (focus) {\n            themeSwitcher.focus();\n          }\n        };\n\n        window\n          .matchMedia("(prefers-color-scheme: dark)")\n          .addEventListener("change", () => {\n            if (storedTheme !== "light" || storedTheme !== "dark") {\n              setTheme(getPreferredTheme());\n            }\n          });\n\n        window.addEventListener("DOMContentLoaded", () => {\n          showActiveTheme(getPreferredTheme());\n\n          for (const toggle of document.querySelectorAll(\n            "[data-bs-theme-value]"\n          )) {\n            toggle.addEventListener("click", () => {\n              const theme = toggle.getAttribute("data-bs-theme-value");\n              localStorage.setItem("theme", theme);\n              setTheme(theme);\n              showActiveTheme(theme, true);\n            });\n          }\n        });\n      })();\n    <\/script> <!--end::Script--> </body><!--end::Body--></html>'])), renderComponent($$result, "Head", $$Head, { "title": title, "path": path }), renderHead(), renderComponent($$result, "Topbar", $$Topbar, { "path": path }), renderComponent($$result, "Sidenav", $$Sidenav, { "path": path, "mainPage": mainPage, "page": page }), renderComponent($$result, "ColorMode", Content, {}), renderComponent($$result, "Footer", $$Footer, {}), renderComponent($$result, "Scripts", $$Scripts, { "path": path }));
}, "/home/ec2-user/vit/AdminLTE/src/pages/pages/docs/color-mode.astro", undefined);

const $$file = "/home/ec2-user/vit/AdminLTE/src/pages/pages/docs/color-mode.astro";
const $$url = "/pages/docs/color-mode";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$ColorMode,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
